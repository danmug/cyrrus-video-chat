[{"/Users/danmg/Documents/Cyrrus-Labs/Cyrrus-video-chat/client/src/index.js":"1","/Users/danmg/Documents/Cyrrus-Labs/Cyrrus-video-chat/client/src/App.js":"2","/Users/danmg/Documents/Cyrrus-Labs/Cyrrus-video-chat/client/src/Context.js":"3","/Users/danmg/Documents/Cyrrus-Labs/Cyrrus-video-chat/client/src/components/Sidebar_Small.js":"4","/Users/danmg/Documents/Cyrrus-Labs/Cyrrus-video-chat/client/src/components/video.js":"5","/Users/danmg/Documents/Cyrrus-Labs/Cyrrus-video-chat/client/src/components/Nav.js":"6","/Users/danmg/Documents/Cyrrus-Labs/Cyrrus-video-chat/client/src/components/Sidebar.js":"7"},{"size":275,"mtime":1619623952304,"results":"8","hashOfConfig":"9"},{"size":1090,"mtime":1619972472071,"results":"10","hashOfConfig":"9"},{"size":2827,"mtime":1619841424877,"results":"11","hashOfConfig":"9"},{"size":9620,"mtime":1629507421162,"results":"12","hashOfConfig":"9"},{"size":1824,"mtime":1620486635876,"results":"13","hashOfConfig":"9"},{"size":6605,"mtime":1629446461569,"results":"14","hashOfConfig":"9"},{"size":9649,"mtime":1629507013315,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"156d9gg",{"filePath":"19","messages":"20","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"18"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"18"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/danmg/Documents/Cyrrus-Labs/Cyrrus-video-chat/client/src/index.js",[],["33","34"],"/Users/danmg/Documents/Cyrrus-Labs/Cyrrus-video-chat/client/src/App.js",["35"],"import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\n\nimport Nav from \"./components/Nav\";\nimport Sidebar from \"./components/Sidebar\";\nimport Video from \"./components/video\";\nimport Sidebar_Small from \"./components/Sidebar_Small\";\n\nconst useStyles = makeStyles((theme) => ({\n\n    wrapper: {\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n        width: '100vw',\n    },\n}));\n\nconst App = () => {\n    const classes = useStyles();\n\n    let sidebar = (\n        <Sidebar />\n    )\n\n    if ( isMobile() ) {\n        sidebar = (\n            <Sidebar_Small />\n        )\n    }\n\n    return (\n        <div className={classes.wrapper}>\n\n            <Nav />\n\n            { sidebar }\n\n            <Video />\n\n        </div>\n    );\n};\n\nfunction isMobile() {\n    const toMatch = [\n        /Android/i,\n        /webOS/i,\n        /iPhone/i,\n        /iPod/i,\n        /BlackBerry/i,\n        /Windows Phone/i\n    ];\n\n    return toMatch.some((toMatchItem) => {\n        return navigator.userAgent.match(toMatchItem);\n    });\n}\n\nexport default App;\n","/Users/danmg/Documents/Cyrrus-Labs/Cyrrus-video-chat/client/src/Context.js",[],"/Users/danmg/Documents/Cyrrus-Labs/Cyrrus-video-chat/client/src/components/Sidebar_Small.js",["36"],"/Users/danmg/Documents/Cyrrus-Labs/Cyrrus-video-chat/client/src/components/video.js",[],"/Users/danmg/Documents/Cyrrus-Labs/Cyrrus-video-chat/client/src/components/Nav.js",["37","38","39"],"import React, {useState, useContext, useEffect} from 'react';\nimport \"./Navbar.css\";\nimport \"./Sidebar.css\";\nimport {Assignment, Phone} from \"@material-ui/icons\";\nimport { SocketContext } from '../Context';\nimport {withStyles, makeStyles, TextField, Button} from \"@material-ui/core\";\n\nimport Modal from '@material-ui/core/Modal';\nimport Backdrop from '@material-ui/core/Backdrop';\nimport { useSpring, animated } from 'react-spring/web.cjs';\nimport {CopyToClipboard} from \"react-copy-to-clipboard\";\n\nconst Fade = React.forwardRef(function Fade(props, ref) {\n    const { in: open, children, onEnter, onExited, ...other } = props;\n    const style = useSpring({\n        from: { opacity: 0 },\n        to: { opacity: open ? 1 : 0 },\n        onStart: () => {\n            if (open && onEnter) {\n                onEnter();\n            }\n        },\n        onRest: () => {\n            if (!open && onExited) {\n                onExited();\n            }\n        },\n    });\n\n    return (\n        <animated.div ref={ref} style={style} {...other}>\n            {children}\n        </animated.div>\n    );\n});\n\nconst Nav = () => {\n    const classes = useStyles();\n    const { answerCall, call, callAccepted, me, name, setName } = useContext(SocketContext);\n    const [notification, setNotification] = useState(false);\n    const [openModal, setOpenModal] = useState(false);\n\n    const handleModal = () => {\n        setOpenModal(true);\n    };\n\n    const handleClose = () => {\n        setOpenModal(false);\n    };\n\n    useEffect(() => {\n        const timer = setTimeout(() => handleModal(), 2500);\n        return () => clearTimeout(timer);\n    }, []);\n\n    return (\n        <div className=\"nav__wrapper\" >\n\n            <div\n                className={ call.isReceivingCall && !callAccepted ? 'nav active' : 'nav ' } >\n                <h3>CYRRUS VIDEO CHAT</h3>\n            </div>\n            <div\n                className=\"notification__wrapper\">\n                <div className={ call.isReceivingCall && !callAccepted ? 'notification active' : 'notification' } >\n\n                    <div onClick={ answerCall } className=\"call\" >\n                        <div className=\"call-phone\">\n                            <div className=\"call-phone__circle\"></div>\n                            <div className=\"call-phone__circle-fill\"></div>\n                            <div className=\"call-phone__circle-img\">\n                                <span className=\"icon-phone\" >\n                                     <Phone fontSize=\"large\" />\n                                </span>\n\n                            </div>\n                        </div>\n                    </div>\n\n                    <h3>{call.name} calling you</h3>\n                </div>\n            </div>\n\n            <Modal\n                aria-labelledby=\"spring-modal-title\"\n                aria-describedby=\"spring-modal-description\"\n                className={classes.modal}\n                open={openModal}\n                onClose={handleClose}\n                closeAfterTransition\n                BackdropComponent={Backdrop}\n                BackdropProps={{\n                    timeout: 500,\n                }}\n            >\n\n                <div className=\"removeOutline\" >\n                    <Fade in={openModal}>\n                        <div className={classes.paper} >\n                            <div className=\"info__modal\" >\n\n                                <div className=\"info__modal_title\" >\n                                    <h4> Account Info</h4>\n                                </div>\n                                <br/>\n                                <CssTextValidator\n                                    variant=\"standard\"\n                                    className={classes.margin}\n                                    fullWidth\n                                    label=\"Enter your name\"\n                                    onChange={(e) => setName(e.target.value)}\n                                    name=\"name\"\n                                    value={name}\n                                    autoComplete='off'\n                                    InputProps={{\n                                        className: classes.label,\n                                    }}\n                                />\n                                <br/>\n\n                                <CopyToClipboard text={me} onClick={ handleClose } >\n                                    <button type=\"button\" className=\"button\" >\n                                        <span className=\"button__text\">COPY YOUR ID</span>\n                                        <span className=\"button__icon\">\n                                           <Assignment fontSize=\"large\" />\n                                        </span>\n                                    </button>\n                                </CopyToClipboard>\n                                <br/>\n                                <div className=\"info__modal_description\" >\n                                    <p>Copy the ID and send it to the<br/> person who will call you.</p>\n                                    <p>Or ask the person you want to <br/>call his ID and make the call.</p>\n                                </div>\n\n                            </div>\n\n                        </div>\n\n                    </Fade>\n                </div>\n            </Modal>\n\n        </div>\n    );\n};\n\nconst CssTextValidator = withStyles({\n    root: {\n        '& label': {\n            color: '#0E0B0F',\n            fontFamily: 'Montserrat',\n            fontSize: '17px',\n            fontWeight: 'bold',\n        },\n\n        '& label.Mui-focused': {\n            color: '#0E0B0F',\n        },\n        '& .MuiInput-underline::before': {\n            borderColor: '#0E0B0F',\n            borderWidth: 2,\n        },\n        '& .MuiInput-underline::after': {\n            // borderColor: '#c1291f',\n            borderColor: '#0E0B0F',\n            borderWidth: 2,\n        }\n    },\n})(TextField);\n\nconst useStyles = makeStyles((theme) => ({\n\n    paper: {\n        backgroundColor: 'rgba(252,235,232,0.8)',\n        border: 'none',\n        borderRadius: '10px',\n        boxShadow: theme.shadows[5],\n        padding: theme.spacing(4, 4, 3),\n    },\n\n    modal: {\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n\n        \"&:focus\":{\n            outline: \"none\"\n        }\n    },\n    margin: {\n        margin: theme.spacing(0),\n    },\n    label : {\n        fontFamily: 'Montserrat',\n        fontSize: '17px',\n        fontWeight: 'bold',\n        color: '#0E0B0F',\n    }\n\n}));\n\nexport default Nav;\n","/Users/danmg/Documents/Cyrrus-Labs/Cyrrus-video-chat/client/src/components/Sidebar.js",["40","41"],{"ruleId":"42","replacedBy":"43"},{"ruleId":"44","replacedBy":"45"},{"ruleId":"46","severity":1,"message":"47","line":28,"column":13,"nodeType":"48","messageId":"49","endLine":28,"endColumn":30},{"ruleId":"50","severity":1,"message":"51","line":1,"column":26,"nodeType":"52","messageId":"53","endLine":1,"endColumn":35},{"ruleId":"50","severity":1,"message":"54","line":6,"column":44,"nodeType":"52","messageId":"53","endLine":6,"endColumn":50},{"ruleId":"50","severity":1,"message":"55","line":40,"column":12,"nodeType":"52","messageId":"53","endLine":40,"endColumn":24},{"ruleId":"50","severity":1,"message":"56","line":40,"column":26,"nodeType":"52","messageId":"53","endLine":40,"endColumn":41},{"ruleId":"50","severity":1,"message":"51","line":1,"column":26,"nodeType":"52","messageId":"53","endLine":1,"endColumn":35},{"ruleId":"50","severity":1,"message":"54","line":6,"column":44,"nodeType":"52","messageId":"53","endLine":6,"endColumn":50},"no-native-reassign",["57"],"no-negated-in-lhs",["58"],"react/jsx-pascal-case","Imported JSX component Sidebar_Small must be in PascalCase or SCREAMING_SNAKE_CASE","JSXOpeningElement","usePascalOrSnakeCase","no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'Button' is defined but never used.","'notification' is assigned a value but never used.","'setNotification' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]